{"version":3,"sources":["js/myTimer.js","js/startTimer.js","index.js"],"names":["CountdownTimer","constructor","selector","targetDate","Date","daysSpan","document","querySelector","hoursSpan","minutesSpan","secondsSpan","_padZero","value","_countDowm","currentTime","_createSpanValue","showTime","setInterval","time","textContent","Math","floor","timer","startBtn","startTimer","setAttribute","addEventListener","getElementsByClassName","days","hours","mins","secs"],"mappings":";;;AACqB,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAArB,MAAMA,EACJC,aAAY,SACVC,EADU,WAEVC,IAEKA,KAAAA,WAAa,IAAIC,KAAKD,GACtBE,KAAAA,SAAWC,SAASC,iBAAiBL,+BACrCM,KAAAA,UAAYF,SAASC,iBAAiBL,gCACtCO,KAAAA,YAAcH,SAASC,iBAAiBL,+BACxCQ,KAAAA,YAAcJ,SAASC,iBAAiBL,+BAI/CS,SAASC,GACAA,OAAAA,EAAQ,OAASA,IAAUA,EAEpCC,aACQC,MAAAA,EAAc,IAAIV,KACnBW,KAAAA,iBAAiBD,GAGxBE,WACEC,YAAY,IAAM,KAAKJ,aAAc,KAGvCE,iBAAiBD,GACTI,MAAAA,EAAO,KAAKf,WAAaW,EAC1BT,KAAAA,SAASc,YAAc,KAAKR,SAASS,KAAKC,MAAMH,EAAQ,QACxDV,KAAAA,UAAUW,YAAc,KAAKR,SAASS,KAAKC,MAAOH,EAAQ,MAAyB,OACnFT,KAAAA,YAAYU,YAAc,KAAKR,SAASS,KAAKC,MAAOH,EAAQ,KAAoB,MAChFR,KAAAA,YAAYS,YAAc,KAAKR,SAASS,KAAKC,MAAOH,EAAQ,IAAc,OA9B9D,QAAA,QAAA;;ACcnB,aAfD,IAAA,EAAA,EAAA,QAAA,cAeC,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAXF,MAAMI,EAAQ,IAAItB,EAAJ,QAAmB,CAC9BE,SAAU,WACVC,WAAY,aAGRoB,EAAWjB,SAASC,cAAc,6BAGxC,SAASiB,IACPD,EAASE,aAAa,WAAY,IAClCH,EAAMN,WAJRO,EAASG,iBAAiB,QAASF;;ACiBpC,aA3BA,QAAA,oBACA,QAAA,mBACA,MAAMZ,EAAQN,SAASqB,uBAAuB,SAMxCC,EAAOR,KAAKC,MAAMH,KAAQ,OAO1BW,EAAQT,KAAKC,MAAOH,KAAQ,MAAyB,MAMrDY,EAAOV,KAAKC,MAAOH,KAAQ,KAAoB,KAM/Ca,EAAOX,KAAKC,MAAOH,KAAQ,IAAc","file":"src.acb14644.js","sourceRoot":"../src","sourcesContent":["export default\nclass CountdownTimer {\n  constructor({\n    selector,\n    targetDate\n  }) {\n    this.targetDate = new Date(targetDate);\n    this.daysSpan = document.querySelector(`${selector} .value[data-value=\"days\"]`);\n    this.hoursSpan = document.querySelector(`${selector} .value[data-value=\"hours\"]`);\n    this.minutesSpan = document.querySelector(`${selector} .value[data-value=\"mins\"]`);\n    this.secondsSpan = document.querySelector(`${selector} .value[data-value=\"secs\"]`);\n\n  }\n  \n  _padZero(value) {\n    return value < 10 ? `0${value}` : value;\n  }\n  _countDowm() {\n    const currentTime = new Date();\n    this._createSpanValue(currentTime);\n  }\n\n  showTime() {\n    setInterval(() => this._countDowm(), 1000);\n  }\n\n  _createSpanValue(currentTime) {\n    const time = this.targetDate - currentTime;\n    this.daysSpan.textContent = this._padZero(Math.floor(time / (1000 * 60 * 60 * 24)));\n    this.hoursSpan.textContent = this._padZero(Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\n    this.minutesSpan.textContent = this._padZero(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n    this.secondsSpan.textContent = this._padZero(Math.floor((time % (1000 * 60)) / 1000));\n\n  }\n}"," import\n CountdownTimer\n    from \"./myTimer\";\n \nconst timer = new CountdownTimer({\n   selector: \"#timer-1\",\n   targetDate: \"2022,1,1\",\n});\n \n const startBtn = document.querySelector(\"button[data-action-start]\");\n startBtn.addEventListener(\"click\", startTimer);\n\n function startTimer() {\n   startBtn.setAttribute('disabled', '')\n   timer.showTime();\n }","import './sass/main.scss';\nimport './js/startTimer';\nconst value = document.getElementsByClassName('value');\n\n/*\n * Оставшиеся дни: делим значение UTC на 1000 * 60 * 60 * 24, количество\n * миллисекунд в одном дне (миллисекунды * секунды * минуты * часы)\n */\nconst days = Math.floor(time / (1000 * 60 * 60 * 24));\n\n/*\n * Оставшиеся часы: получаем остаток от предыдущего расчета с помощью оператора\n * остатка % и делим его на количество миллисекунд в одном часе\n * (1000 * 60 * 60 = миллисекунды * минуты * секунды)\n */\nconst hours = Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n\n/*\n * Оставшиеся минуты: получаем оставшиеся минуты и делим их на количество\n * миллисекунд в одной минуте (1000 * 60 = миллисекунды * секунды)\n */\nconst mins = Math.floor((time % (1000 * 60 * 60)) / (1000 * 60));\n\n/*\n * Оставшиеся секунды: получаем оставшиеся секунды и делим их на количество\n * миллисекунд в одной секунде (1000)\n */\nconst secs = Math.floor((time % (1000 * 60)) / 1000);"]}